Btrfs Tree Dumps

btrfs_mint (100 GiB, physical)

TODO: dump the root tree so we can (A) figure out how to read this particular FS and
	(B) shed some light on how subvolumes are mounted
TODO: dump the chunk tree and investigate the non-chunk/dev items
	(including items past the number of items supposedly in the node)

Root tree

[Node] tree = 0x1 addr = 0x0000000016620000 level = 0x00 nrItems = 0x0f

[00] ROOT_ITEM 0x2 -> 0x16621000					// extent tree
[01] ROOT_ITEM 0x4 -> 0x7fe8000						// dev tree
[02] INODE_REF 0x5 -> 'default' parent: 0x6
[03] ROOT_ITEM 0x5 -> 0x1c14000						// fs tree
[04] ROOT_REF tree: 0x5 subtree: 0x100
[05] ROOF_REF tree: 0x5 subtree: 0x101
[06] INODE_ITEM 0x6
[07] INODE_REF 0x6 -> '..'
[08] DIR_ITEM parent: 0x6 child: 0x5 -> 'default'
[09] ROOT_ITEM 0x7 -> 0x1660c000					// csum tree
[0a] ROOT_ITEM 0x100 -> 0x165f7000					// first fs subtree
[0b] ROOT_BACKREF subtree: 0x100 tree: 0x5
[0c] ROOT_ITEM 0x101 -> 0x165e0000					// second fs subtree
[0d] ROOT_BACKREF subtree: 0x101 tree: 0x5
[0e] ROOT_ITEM -0x9 -> 0x1c05000					// data reloc tree

Main FS tree

[Node] tree = 0x5 addr = 0x1c14000 level = 0x00 nrItems = 0x00000006

[00] INODE_ITEM 0x100
[01] INODE_REF 0x100 -> '..' parent: 0x100
[02] DIR_ITEM parent: 0x100 child: 0x100 -> '@'
[03] DIR_ITEM parent: 0x100 child: 0x101 -> '@home'
[04] DIR_INDEX 0x100 = idx 0x2
[05] DIR_INDEX 0x100 = idx 0x3
