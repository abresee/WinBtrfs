TODO list

Roadmap:
Get directory listings and file info working (fs tree queries)
Get file data working (extents)
- Remove Dokan callbacks that should never be called
Esoteric Btrfs stuff
- Compression (zlib)
- Subvolumes
- Multi-drive volumes
- Converted ext4 fs
GUI (C#: which .NET version?)
Installer (NSIS)
MinGW/Cygwin[/Mono] build support
UI translations
Old OS testing

Code stuff:
Rectify inconsistent struct member names: num/nr, csum/cSum/crc32c/etc, generation/gen, objectID/objID, len/length
Rectify inconsistent function arg names: len/length, addr/lAddr/logicalAddr/physAddr/etc, super/SB/superblock
Cache frequently used blocks in memory, especially FS tree nodes and other trees that are references multiple times (extent tree?)
Multithread support for everything: make block reading threadsafe, and ensure that calls to btrfs_filesystem.c functions
	from different threads will not cause serious race conditions and/or destruction
Check all malloc/realloc calls and end fatally upon malloc failure
Develop a better system for nonfatal error reporting than just piling on a bunch of assertions (look up assert best practices)
Rectify comiler warnings
Make sure performance isn't horrendous for filesystems with big FS trees (i.e. large directory structures)
	Do, say, a Linux installation on a Btrfs partition and then feed the image into WinBtrfs and have it do a dirlist or something
	Fix this with... caching? or something?
Verify that weird-ass Windows unicode path strings don't crash the driver program
Make sure that file times get converted absolutely precisely
Add symlinks and hard links to the test FS and make sure they work as intended
Try to hit all the outward-facing filesystem interfaces (especially btrfs_operations.c) with extra-long strings for buffer overrun testing
Optimize situations where I used realloc to pound the memory allocator at least a little less
Test FSes with: weird node/sector/leafsizes; tons of small files; deep directory structures
Clean up headers, they are currently too messy and work by different conventions
Replace #define with enums and consts
Find all places where enums are used and change the type to the enum name
Fix the memory overwrite issue in the new caching algo
Refactor out the endianness conversions (perhaps make separate structs or classes for on-disk vs. in-memory structs and have
	the constructor do all the conversions)
Replace fake bools with real C++ bools
Eliminate memcpy from cachedRead and directRead and make callers just receive a pointer from which they read (no call to free required)
Move i, j, etc. into for-loop definitions if they are scope-limited like they should be
Reimplement the block cache system so it works on recentness rather than number of reads: sort by most-recent to least-recent (easy splicing)
	and remove oldest nodes. have a static int increment on each cached read and store that number in the node struct on each read.
