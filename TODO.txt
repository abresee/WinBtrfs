TODO list

Roadmap:
Symlinks
File locking and unlocking callbacks
File security callback
XATTRs
Remove Dokan callbacks that should never be called
Multi-drive volumes
Extended attributes?
Preallocated files (torrents maybe)
Data corruption resiliency (detect checksum issues and read from other copies if possible)
Concurrent callback support (threadsafety) (this also involves setting DOKANOPTIONS.ThreadCount)
GUI (C#: which .NET version?)
Installer (NSIS)
MinGW/Cygwin[/Mono] build support
UI translations
OS testing: Win9x and ReactOS (provided Dokan supports these)
Caching?

Tests:
Symlinks to files and directories
Cross-subvolume symlinks
Verify that unicode path strings don't result in a crash
Try to hit all the outward-facing filesystem interfaces (especially btrfs_operations.c) with extra-long strings for buffer overrun testing
Test weird node/sector/leaf sizes
Check for endianness errors by reversing byte orders on disk or running on a BE architecture (Wine on PPC Linux??)
Determine if, when a subvolume (B) is created within another subvolume (A), the ROOT_REFs have 0x5->A, and A->B, thwarting tree dumping,
	possibly among other things that assume that these trees will have tree 0x5 as their parent
Write an fopen (or Win32) test to determine if CREATE_ALWAYS or OPEN_ALWAYS will ever get passed to btrfsCreateFile
Try different Win32 apis (specifically ones that correspond with callbacks that should NEVER BE CALLED) and see if eliciting a crash
	is possible; also, see if removing the callbacks (putting NULL in the callback array) does what we ultimately want
Mount a test image in SSD mode and then see if WinBtrfs uses a secondary superblock
See how linux btrfs handles cross-subvolume symlinks and hardlinks; verify that WinBtrfs uses the same behavior, good or bad
Verify that two requests to WinBtrfsService to mount a volume in quick succession will both be fulfilled (especially with a Sleep(5000)
	in WinBtrfsService::mount to make sure)

Bugs:
Mounting btrfs_symlinks.img to C:\mount and dirlisting C:\mount\dir results in a getPathID failure
Dirlisting an empty subvolume (e.g. X:\a2 or X:\a1\b2 in btrfs_nestsubvol.img) results in a FSOP_DIR_LIST failure
	(this seems to be related to the fact that Windows expects '.' and '..' for every directory other than '\', but
	the new subvolume code elides the '.' and '..' for every SUBVOL's root (so X:\a2 returns no '.' and '..' but it should)

Profile:
Check out how bad my overuse of realloc really is
Take a close look at how logical-to-physical, chunk-interpreting code performs (this underlies every read operation)
In branch per_thread_struct, check how much time is spent in getThisInst

Code stuff:
Add overflow checks for program arguments
Check for memleaks with valgrind
Rectify inconsistent struct member names: num/nr, csum/cSum/crc32c/etc, generation/gen, objectID/objID, len/length
Rectify inconsistent function arg names: len/length, addr/lAddr/logicalAddr/physAddr/etc, super/SB/superblock
Multithread support for everything: make block reading threadsafe, and ensure that calls to btrfs_operations.cpp functions
	from different threads do not use any shared state
Check all malloc/realloc calls and end fatally upon malloc failure (return win32 equivalent of -ENOMEM)
Develop a better system for nonfatal error reporting than just piling on a bunch of assertions (look up assert best practices)
Rectify compiler warnings
Retool the FS tree return code system so it returns Windows error codes that are descriptive and can be passed back to the OS
	when control returns to the Dokan callback; to do this, segregate the real return value (a win32 DWORD error code value) from
	the int used internally to count things and ensure the call went successfully
Is MS's STL threadsafe? If not, we may have problems with the openFiles linked list being used in multiple threads in dokan_callbacks.cpp
	but that can be overridden by having a mutex just for that purpose
Reimplement the openFiles array in dokan_callbacks.cpp as a multimap<BtrfsObjID, FileStruct> where FileStruct is a new struct that holds,
	in addition to a FilePkg, the values passed as desiredAccess and shareMode to CreateFile; this should allow duplicates and properly
	respect sharing and access mode requests from CreateFile
Remove type punning (casting void pointers back and forth) from parseFSTree; instead, possibly create an interface that each FSOP
	implements, and each implementation class can have its own values that are passed with it
Add optimizations for FS tree parsing: use the rules of sorting within the tree to skip over parts entirely to get to the relevant item(s)
	This is likely to be more feasible with smaller FSOPs, the likes of FSOP_NAME_TO_ID; although, for FSOP_DIR_LIST, it may be
	highly effective to skip right to the INODE_ITEM for the parent directory and then resume parsing like usual
Be extra precise with filename strs due to overflow concerns: char foo[bar], strcpy, str conversions
Get rid of atoi!
Remove the chunk/root tree arrays and simply use CTOPs and RTOPs to get at their items
Add all function prototypes to header files (even intra-module ones)
Use the DIY-filter version of the FindFiles callback and do filtering as the dirlist FSOP happens so we don't create dirlist entries
	that just get removed later by the post-hoc filtering process
When reading from mirrored chunks, alternate the stripe from which we read so as to boost performance (basically read striping)
Implement fully striped reading for RAID0/striped or RAID1/mirrored chunks for max performance
Use fprintf(stderr, ...) for error messages
Add a Ctrl+C handler to unmount and clean up gracefully
Decompress only the nodes of an extent that are going to be read in part or in whole; skip those that won't be read
Find better Windows error codes for failure conditions in Dokan callbacks
Be more consistent about whether error output is in the caller or the callee (currently they are both, somewhat randomly)
Look thru <WinError.h> and adjust Win32 error codes based on the message they will present to the user
One organizational possibility: we would have WinBtrfsLib become WinBtrfsDrv and be essentially what WinBtrfsCLI was, and simply have
	WinBtrfsService run instances of that program with proper command line parameters; this would allow an advanced user to still
	run WinBtrfsDrv from the command line to mount individual volumes (and would make debugging a bit easier); however, this would
	reduce the ability of WinBtrfsService to interact with WinBtrfsDrv to control it; also, these manually-run WinBtrfsDrv instances
	would be outside of the realm of WinBtrfsService to track, list, and control, which seems messy
Use const_iterators wherever possible (when not changing elements of a vector/list/whatever)
Add a stack trace dump upon assertion failure (Google breakpad?)
Replace explicit GetLastError error messages with user-friendly messages in all projects
Provide a means to deal with the situation where WinBtrfsService is killed and instances of WinBtrfsDrv are orphaned:
	we probably want either (a) the orphans to detect that their parent was killed and self-abort, or (b) have future new instances of
	WinBtrfsService kill orphans or re-adopt them as proper children
Remove WinBtrfsService 32-bit lib dependencies so we can compile for x64 mode (dokan.lib is the culprit)
Replace printf("..."); with puts, fprintf with fputs
If communication with WinBtrfsService fails on the CLI/GUI side, try (1) killing the process if it exists, (2) restarting the
	service, and (3) deleting & installing the service
